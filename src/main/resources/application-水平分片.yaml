host: 192.168.3.19

spring:
  application:
    name: sharding-jdbc-demo
  profiles:
    active: dev
  shardingsphere: # 注意这里不能用中划线 - 连接，否则读取不到配置文件
    datasource:
      names: server-user,server-order0,server-order1 # 数据源名称
      server-user:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.jdbc.Driver
        jdbc-url: jdbc:mysql://${host}:3301/db_user
        username: root
        password: 123456
      server-order0:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.jdbc.Driver
        jdbc-url: jdbc:mysql://${host}:3310/db_order
        username: root
        password: 123456
      server-order1:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.jdbc.Driver
        jdbc-url: jdbc:mysql://${host}:3311/db_order
        username: root
        password: 123456
    mode:
      type: Memory # 内存模式（当前配置文件会作为元数据加载到内存中）
    props:
      sql-show: true
    rules:
      sharding:
        tables: # 分表配置
          t_user: # 逻辑表名称
            # 由数据源名 + 表名组成，以小数点分隔。多个表以逗号分隔，支持 inline 表达式。
            # 缺省表示使用已知数据源与逻辑表名称生成数据节点，用于广播表（即每个库中都需要一个同样的表用于关联查询，多为字典表）或只分库不分表且所有库的表结构完全一致的情况
            actual-data-nodes: server-user.t_user # 实际数据节点
          t_order: # 逻辑表名称
            # 行内表达式，最终会被解析为 server-order0.t_order0, server-order0.t_order1, server-order1.t_order0, server-order1.t_order1
            actual-data-nodes: server-order$->{0..1}.t_order$->{0..1}
            database-strategy: # 分库策略（有多个数据库，该路由到哪个数据库）
              standard:
                sharding-column: user_id # 根据user_id列进行分片
                sharding-algorithm-name: alg_inline_user_id
            table-strategy: # 分表策略（一个数据库有多个表，该路由到哪个表）
              standard:
                sharding-column: order_no
                sharding-algorithm-name: alg_hash_mod
            key-generate-strategy: # 分布式序列策略
              column: id # 分布式序列列名称
              key-generator-name: alg_snowflake # 自定义分布式算法名称
        sharding-algorithms: # 分片算法
          alg_inline_user_id: # 自定义的分片算法名称
            type: INLINE # 行表达式分片算法
            props:
              algorithm-expression: server-order$->{user_id % 2} # 根据user_id进行过取模运算
          alg_hash_mod:
            type: HASH_MOD # 取模分片算法
            props:
              sharding-count: 2
        key-generators:
          alg_snowflake: # 自定义分布式算法名称
            type: SNOWFLAKE # 分布式算法类型
